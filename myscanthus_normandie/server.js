// Generated by Haxe 4.0.5
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$ = {};
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.__name__ = true;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.toOutgoingResponse = function(this1) {
	var this2 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(this1);
	var this3 = new tink_http_ResponseHeaderBase(this1,this2,[new tink_http_HeaderField("content-length","0")],"HTTP/1.1");
	var this4 = new tink_http__$Response_OutgoingResponseData(this3,tink_io__$Source_Source_$Impl_$.EMPTY);
	return this4;
};
var httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$ = {};
httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.__name__ = true;
httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode = function(statusCode) {
	switch(statusCode) {
	case 100:
		return "Continue";
	case 101:
		return "Switching Protocols";
	case 102:
		return "Processing";
	case 200:
		return "OK";
	case 201:
		return "Created";
	case 202:
		return "Accepted";
	case 203:
		return "Non-Authoritative Information";
	case 204:
		return "No Content";
	case 205:
		return "Reset Content";
	case 206:
		return "Partial Content";
	case 207:
		return "Multi-Status";
	case 208:
		return "Already Reported";
	case 226:
		return "IM Used";
	case 300:
		return "Multiple Choices";
	case 301:
		return "Moved Permanently";
	case 302:
		return "Found";
	case 303:
		return "See Other";
	case 304:
		return "Not Modified";
	case 305:
		return "Use Proxy";
	case 306:
		return "Switch Proxy";
	case 307:
		return "Temporary Redirect";
	case 308:
		return "Permanent Redirect";
	case 400:
		return "Bad Request";
	case 401:
		return "Unauthorized";
	case 402:
		return "Payment Required";
	case 403:
		return "Forbidden";
	case 404:
		return "Not Found";
	case 405:
		return "Method Not Allowed";
	case 406:
		return "Not Acceptable";
	case 407:
		return "Proxy Authentication Required";
	case 408:
		return "Request Timeout";
	case 409:
		return "Conflict";
	case 410:
		return "Gone";
	case 411:
		return "Length Required";
	case 412:
		return "Precondition Failed";
	case 413:
		return "Payload Too Large";
	case 414:
		return "URI Too Long";
	case 415:
		return "Unsupported Media Type";
	case 416:
		return "Range Not Satisfiable";
	case 417:
		return "Expectation Failed";
	case 418:
		return "I'm a teapot";
	case 421:
		return "Misdirected Request";
	case 422:
		return "Unprocessable Entity";
	case 423:
		return "Locked";
	case 424:
		return "Failed Dependency";
	case 426:
		return "Upgrade Required";
	case 428:
		return "Precondition Required";
	case 429:
		return "Too Many Requests";
	case 431:
		return "Request Header Fields Too Large";
	case 451:
		return "Unavailable For Legal Reasons";
	case 500:
		return "Internal Server Error";
	case 501:
		return "Not Implemented";
	case 502:
		return "Bad Gateway";
	case 503:
		return "Service Unavailable";
	case 504:
		return "Gateway Timeout";
	case 505:
		return "HTTP Version Not Supported";
	case 506:
		return "Variant Also Negotiates";
	case 507:
		return "Insufficient Storage";
	case 508:
		return "Loop Detected";
	case 510:
		return "Not Extended";
	case 511:
		return "Network Authentication Required";
	default:
		return "Unknown Status";
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = true;
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_buffer__$Buffer_Helper = function() { };
js_node_buffer__$Buffer_Helper.__name__ = true;
js_node_buffer__$Buffer_Helper.bytesOfBuffer = function(b) {
	var o = Object.create(haxe_io_Bytes.prototype);
	o.length = b.byteLength;
	o.b = b;
	b.bufferValue = b;
	b.hxBytes = o;
	b.bytes = b;
	return o;
};
var js_node_http_Server = require("http").Server;
var js_node_nodemailer_NodeMailer = require("nodemailer");
var server_Main = function() { };
server_Main.__name__ = true;
server_Main.main = function() {
	var container = new tink_http_containers_NodeContainer(tink_http_containers__$NodeContainer_ServerKindBase.Port(80));
	var router = new tink_web_routing_Router0(new server_Root());
	var handler = new tink_http_SimpleHandler(function(req) {
		var this1 = tink_web_routing_Context.ofRequest(req);
		var this2 = router.route(this1);
		var f = tink_core__$Promise_Recover_$Impl_$.ofSync(tink_http__$Response_OutgoingResponse_$Impl_$.reportError);
		var ret = this2.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	});
	handler = new tink_http_middleware_CrossOriginResourceSharing(tink_http_middleware__$CrossOriginResourceSharing_CorsProcessor_$Impl_$.regex(new EReg(".*",""),true)).apply(handler);
	container.run(handler);
};
var server_Root = function() {
};
server_Root.__name__ = true;
server_Root.prototype = {
	sendMail: function(body) {
		var transporter = js_node_nodemailer_NodeMailer.createTransport({ service : "Gmail", auth : { user : "no.reply.miscanthus.normandie@gmail.com", pass : "pom14@MP"}, tls : { rejectUnauthorized : false}});
		var subject = "Message de la part de " + body.name + ": " + body.subject;
		transporter.sendMail({ from : body.mail, to : "erikkubiak@gmail.com", subject : subject, message : body.message, replyTo : { name : body.name, address : body.mail}},function(err,info) {
			if(err != null) {
				console.log("src/server/Main.hx:53:",err);
			} else if(info != null) {
				console.log("src/server/Main.hx:55:",info);
			}
			return;
		});
		return 200;
	}
};
var tink_chunk_ChunkBase = function() { };
tink_chunk_ChunkBase.__name__ = true;
tink_chunk_ChunkBase.prototype = {
	flatten: function(into) {
	}
};
var tink__$Chunk_EmptyChunk = function() {
};
tink__$Chunk_EmptyChunk.__name__ = true;
tink__$Chunk_EmptyChunk.__super__ = tink_chunk_ChunkBase;
tink__$Chunk_EmptyChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	getLength: function() {
		return 0;
	}
	,blitTo: function(target,offset) {
	}
	,toString: function() {
		return "";
	}
	,toBytes: function() {
		return tink__$Chunk_EmptyChunk.EMPTY;
	}
});
var tink__$Chunk_Chunk_$Impl_$ = {};
tink__$Chunk_Chunk_$Impl_$.__name__ = true;
tink__$Chunk_Chunk_$Impl_$.concat = function(this1,that) {
	return tink_chunk_CompoundChunk.cons(this1,that);
};
tink__$Chunk_Chunk_$Impl_$.catChunk = function(a,b) {
	return tink__$Chunk_Chunk_$Impl_$.concat(a,b);
};
var tink__$Url_Url_$Impl_$ = {};
tink__$Url_Url_$Impl_$.__name__ = true;
tink__$Url_Url_$Impl_$.fromString = function(s) {
	return tink__$Url_Url_$Impl_$.parse(s);
};
tink__$Url_Url_$Impl_$.noop = function(_) {
};
tink__$Url_Url_$Impl_$.parse = function(s,onError) {
	if(s == null) {
		return tink__$Url_Url_$Impl_$.parse("");
	}
	if(onError == null) {
		onError = tink__$Url_Url_$Impl_$.noop;
	}
	s = StringTools.trim(s);
	if(StringTools.startsWith(s,"data:")) {
		var this1 = { scheme : "data", payload : HxOverrides.substr(s,5,null), hosts : []};
		return this1;
	}
	var FORMAT = new EReg("^(([a-zA-Z][a-zA-Z0-9\\-+.]*):)?((//(([^@/]+)@)?([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?)$","");
	var HOST = new EReg("^(\\[(.*)\\]|([^:]*))(:(.*))?$","");
	FORMAT.match(s);
	var hosts;
	var _g = FORMAT.matched(7);
	if(_g == null) {
		hosts = [];
	} else {
		var v = _g;
		var _g1 = [];
		var _g11 = 0;
		var _g2 = v.split(",");
		while(_g11 < _g2.length) {
			var host = _g2[_g11];
			++_g11;
			HOST.match(host);
			var host1;
			var _g12 = HOST.matched(2);
			var _g21 = HOST.matched(3);
			if(_g12 == null) {
				var ipv4 = _g21;
				host1 = ipv4;
			} else if(_g21 == null) {
				var ipv6 = _g12;
				host1 = "[" + ipv6 + "]";
			} else {
				onError("invalid host " + host);
				host1 = null;
			}
			var port;
			var _g3 = HOST.matched(5);
			if(_g3 == null) {
				port = null;
			} else {
				var v1 = _g3;
				var _g31 = Std.parseInt(v1);
				if(_g31 == null) {
					onError("invalid port " + v1);
					port = null;
				} else {
					var p = _g31;
					port = p;
				}
			}
			_g1.push(tink_url__$Host_Host_$Impl_$._new(host1,port));
		}
		hosts = _g1;
	}
	var path = FORMAT.matched(8);
	if(hosts.length > 0 && path.charAt(0) != "/") {
		path = "/" + path;
	}
	var this2 = { scheme : FORMAT.matched(2), payload : FORMAT.matched(3), hosts : hosts, auth : FORMAT.matched(6), path : tink_url__$Path_Path_$Impl_$.ofString(path), query : FORMAT.matched(10), hash : FORMAT.matched(12)};
	return this2;
};
var tink_chunk_ByteChunk = function(data,from,to) {
	this.data = data;
	this.from = from;
	this.to = to;
};
tink_chunk_ByteChunk.__name__ = true;
tink_chunk_ByteChunk.of = function(b) {
	if(b.length == 0) {
		return tink__$Chunk_Chunk_$Impl_$.EMPTY;
	}
	var ret = new tink_chunk_ByteChunk(b.b.bufferValue,0,b.length);
	ret.wrapped = b;
	return ret;
};
tink_chunk_ByteChunk.__super__ = tink_chunk_ChunkBase;
tink_chunk_ByteChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	flatten: function(into) {
		into.push(this);
	}
	,getLength: function() {
		return this.to - this.from;
	}
	,blitTo: function(target,offset) {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		target.blit(offset,this.wrapped,this.from,this.to - this.from);
	}
	,toBytes: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.sub(this.from,this.to - this.from);
	}
	,toString: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.getString(this.from,this.to - this.from);
	}
});
var tink_chunk_CompoundChunk = function() {
};
tink_chunk_CompoundChunk.__name__ = true;
tink_chunk_CompoundChunk.asCompound = function(c) {
	return ((c) instanceof tink_chunk_CompoundChunk) ? c : null;
};
tink_chunk_CompoundChunk.cons = function(a,b) {
	var _g = b.getLength();
	var _g1 = a.getLength();
	if(_g1 == 0) {
		if(_g == 0) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else {
			return b;
		}
	} else if(_g == 0) {
		return a;
	} else {
		var la = _g1;
		var lb = _g;
		var _g2 = tink_chunk_CompoundChunk.asCompound(b);
		var _g11 = tink_chunk_CompoundChunk.asCompound(a);
		if(_g11 == null) {
			if(_g2 == null) {
				return tink_chunk_CompoundChunk.create([a,b],2);
			} else {
				var v = _g2;
				if(v.depth < 100) {
					return tink_chunk_CompoundChunk.create([a,b],v.depth + 1);
				} else {
					var flat = [];
					v.flatten(flat);
					b.flatten(flat);
					return tink_chunk_CompoundChunk.create(flat,2);
				}
			}
		} else if(_g2 == null) {
			var v1 = _g11;
			if(v1.depth < 100) {
				return tink_chunk_CompoundChunk.create([a,b],v1.depth + 1);
			} else {
				var flat1 = [];
				v1.flatten(flat1);
				b.flatten(flat1);
				return tink_chunk_CompoundChunk.create(flat1,2);
			}
		} else {
			var a1 = _g11;
			var b1 = _g2;
			var depth = a1.depth > b1.depth ? a1.depth : b1.depth;
			return tink_chunk_CompoundChunk.create(a1.chunks.concat(b1.chunks),depth);
		}
	}
};
tink_chunk_CompoundChunk.create = function(chunks,depth) {
	var ret = new tink_chunk_CompoundChunk();
	var offsets = [0];
	var length = 0;
	var _g = 0;
	while(_g < chunks.length) {
		var c = chunks[_g];
		++_g;
		offsets.push(length += c.getLength());
	}
	ret.chunks = chunks;
	ret.offsets = offsets;
	ret.length = length;
	ret.depth = depth;
	return ret;
};
tink_chunk_CompoundChunk.__super__ = tink_chunk_ChunkBase;
tink_chunk_CompoundChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	getLength: function() {
		return this.length;
	}
	,flatten: function(into) {
		var _g = 0;
		var _g1 = this.chunks;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.flatten(into);
		}
	}
	,blitTo: function(target,offset) {
		var _g = 0;
		var _g1 = this.chunks.length;
		while(_g < _g1) {
			var i = _g++;
			this.chunks[i].blitTo(target,offset + this.offsets[i]);
		}
	}
	,toString: function() {
		return this.toBytes().toString();
	}
	,toBytes: function() {
		var ret = new haxe_io_Bytes(new ArrayBuffer(this.length));
		this.blitTo(ret,0);
		return ret;
	}
});
var tink_chunk_nodejs_BufferChunk = function(buffer) {
	this.buffer = buffer;
};
tink_chunk_nodejs_BufferChunk.__name__ = true;
tink_chunk_nodejs_BufferChunk.prototype = {
	flatten: function(into) {
		tink_chunk_ByteChunk.of(this.toBytes()).flatten(into);
	}
	,getLength: function() {
		return this.buffer.length;
	}
	,toString: function() {
		return this.buffer.toString();
	}
	,toBytes: function() {
		var copy = tink_chunk_nodejs_BufferChunk.alloc(this.buffer.length);
		this.buffer.copy(copy);
		return js_node_buffer__$Buffer_Helper.bytesOfBuffer(copy);
	}
	,blitTo: function(target,offset) {
		var data = target.b;
		this.buffer.copy(js_node_buffer_Buffer.from(data.buffer,data.byteOffset,target.length),offset);
		return;
	}
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = true;
var tink_core__$Callback_Callback_$Impl_$ = {};
tink_core__$Callback_Callback_$Impl_$.__name__ = true;
tink_core__$Callback_Callback_$Impl_$.invoke = function(this1,data) {
	if(tink_core__$Callback_Callback_$Impl_$.depth < 500) {
		tink_core__$Callback_Callback_$Impl_$.depth++;
		this1(data);
		tink_core__$Callback_Callback_$Impl_$.depth--;
	} else {
		var _e = this1;
		var f = function(data1) {
			tink_core__$Callback_Callback_$Impl_$.invoke(_e,data1);
		};
		var data2 = data;
		tink_core__$Callback_Callback_$Impl_$.defer(function() {
			f(data2);
		});
	}
};
tink_core__$Callback_Callback_$Impl_$.fromNiladic = function(f) {
	return f;
};
tink_core__$Callback_Callback_$Impl_$.defer = function(f) {
	process.nextTick(f);
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
tink_core_SimpleLink.__name__ = true;
tink_core_SimpleLink.prototype = {
	cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = true;
tink_core__$Callback_LinkPair.prototype = {
	cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this2 = this.b;
			if(this2 != null) {
				this2.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw new js__$Boot_HaxeError("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.prototype = {
	cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used < list.used >> 1) {
				list.compact();
			}
		}
	}
};
var tink_core_CallbackList = function() {
	this.busy = false;
	this.queue = [];
	this.used = 0;
	this.cells = [];
};
tink_core_CallbackList.__name__ = true;
tink_core_CallbackList.prototype = {
	ondrain: function() {
	}
	,invoke: function(data,destructive) {
		if(this.busy) {
			var f = $bind(this,this.invoke);
			var data1 = data;
			var destructive1 = destructive;
			var tmp = function() {
				f(data1,destructive1);
				return;
			};
			this.queue.push(tmp);
		} else {
			this.busy = true;
			var length = this.cells.length;
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.cells[i];
				if(_this.list != null) {
					tink_core__$Callback_Callback_$Impl_$.invoke(_this.cb,data);
				}
			}
			this.busy = false;
			if(destructive) {
				var added = this.cells.length - length;
				var _g2 = 0;
				var _g3 = length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var _this1 = this.cells[i1];
					_this1.cb = null;
					_this1.list = null;
				}
				var _g4 = 0;
				var _g5 = added;
				while(_g4 < _g5) {
					var i2 = _g4++;
					this.cells[i2] = this.cells[length + i2];
				}
				this.resize(added);
			} else if(this.used < this.cells.length) {
				this.compact();
			}
			if(this.queue.length > 0) {
				(this.queue.shift())();
			}
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			this.ondrain();
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				var _g21 = _g2.list;
				if(_g2.cb != null) {
					var v = _g2;
					if(compacted != i) {
						this.cells[compacted] = v;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = true;
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		var _g = tink_core_TypedError.asError(e1);
		var tmp;
		if(_g == null) {
			tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e1,pos) : report(e1);
		} else {
			var e2 = _g;
			tmp = e2;
		}
		return tink_core_Outcome.Failure(tmp);
	}
};
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		var any = this;
		throw js__$Boot_HaxeError.wrap(any);
	}
};
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.prototype = {
	get: function() {
		return this.value;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.prototype = {
	map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var tmp = _gthis.value.get();
			return f(tmp).handle($yield);
		});
	}
	,handle: function(cb) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,this.value.get());
		return null;
	}
	,eager: function() {
		return this;
	}
	,gather: function() {
		return this;
	}
};
var tink_core__$Future_Future_$Impl_$ = {};
tink_core__$Future_Future_$Impl_$.__name__ = true;
tink_core__$Future_Future_$Impl_$.first = function(this1,other) {
	var ret = new tink_core_FutureTrigger();
	var l1 = this1.handle($bind(ret,ret.trigger));
	var l2 = other.handle($bind(ret,ret.trigger));
	var ret1 = ret;
	if(l1 != null) {
		var this2 = l1;
		ret1.handle(function(_) {
			this2.cancel();
		});
	}
	if(l2 != null) {
		var this3 = l2;
		ret1.handle(function(_1) {
			this3.cancel();
		});
	}
	return ret1;
};
tink_core__$Future_Future_$Impl_$.flatten = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		var inner = null;
		var outer = f.handle(function(second) {
			inner = second.handle($yield);
		});
		var this1 = new tink_core_SimpleLink(function() {
			if(inner != null) {
				inner.cancel();
			}
		});
		return new tink_core__$Callback_LinkPair(outer,this1);
	});
};
tink_core__$Future_Future_$Impl_$.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			f($yield);
			return null;
		});
	} else {
		var op = new tink_core_FutureTrigger();
		var wrapped = f;
		tink_core__$Callback_Callback_$Impl_$.invoke(wrapped,$bind(op,op.trigger));
		return op;
	}
};
var tink_core_FutureTrigger = function() {
	this.list = new tink_core_CallbackList();
};
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var node = new tink_core__$Callback_ListCell(callback,v);
			v.cells.push(node);
			v.used++;
			return node;
		}
	}
	,map: function(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v1) {
				var node1 = f(v1);
				ret.trigger(node1);
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,flatMap: function(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v1) {
				f(v1).handle($bind(ret,ret.trigger));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			list.invoke(result,true);
			return true;
		}
	}
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.suspended = true;
	var _gthis = this;
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList();
	this.callbacks.ondrain = function() {
		if(_gthis.callbacks != null) {
			_gthis.suspended = true;
			var this1 = _gthis.link;
			if(this1 != null) {
				this1.cancel();
			}
			_gthis.link = null;
		}
	};
};
tink_core__$Future_SuspendableFuture.__name__ = true;
tink_core__$Future_SuspendableFuture.prototype = {
	trigger: function(value) {
		var _g = this.callbacks;
		if(_g != null) {
			var list = _g;
			this.callbacks = null;
			this.suspended = false;
			this.result = value;
			this.link = null;
			this.wakeup = null;
			list.invoke(value,true);
		}
	}
	,handle: function(callback) {
		var _g = this.callbacks;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var _this = this.callbacks;
			var node = new tink_core__$Callback_ListCell(callback,_this);
			_this.cells.push(node);
			_this.used++;
			var ret = node;
			if(this.suspended) {
				this.suspended = false;
				this.link = this.wakeup($bind(this,this.trigger));
			}
			return ret;
		}
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return _gthis.handle(function(res) {
				var tmp = f(res);
				$yield(tmp);
			});
		});
	}
	,flatMap: function(f) {
		return tink_core__$Future_Future_$Impl_$.flatten(this.map(f));
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		this.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return this;
	}
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.prototype = {
	get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var tmp = _gthis.get();
			return f(tmp);
		});
	}
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = true;
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = true;
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g1 = outcome.failure;
		return null;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
var tink_core__$Promise_Promise_$Impl_$ = {};
tink_core__$Promise_Promise_$Impl_$.__name__ = true;
tink_core__$Promise_Promise_$Impl_$.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather1 == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Promise_Promise_$Impl_$.ofSpecific = function(s) {
	return s;
};
var tink_core__$Promise_Next_$Impl_$ = {};
tink_core__$Promise_Next_$Impl_$.__name__ = true;
tink_core__$Promise_Next_$Impl_$.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
var tink_core__$Promise_Recover_$Impl_$ = {};
tink_core__$Promise_Recover_$Impl_$.__name__ = true;
tink_core__$Promise_Recover_$Impl_$.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core__$Signal_Signal_$Impl_$ = {};
tink_core__$Signal_Signal_$Impl_$.__name__ = true;
tink_core__$Signal_Signal_$Impl_$.trigger = function() {
	return new tink_core_SignalTrigger();
};
var tink_core_SignalTrigger = function() {
};
tink_core_SignalTrigger.__name__ = true;
var tink_http_ContainerResult = $hxEnums["tink.http.ContainerResult"] = { __ename__ : true, __constructs__ : ["Running","Failed","Shutdown"]
	,Running: ($_=function(running) { return {_hx_index:0,running:running,__enum__:"tink.http.ContainerResult",toString:$estr}; },$_.__params__ = ["running"],$_)
	,Failed: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.http.ContainerResult",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Shutdown: {_hx_index:2,__enum__:"tink.http.ContainerResult",toString:$estr}
};
var tink_http_SimpleHandler = function(f) {
	this.f = f;
};
tink_http_SimpleHandler.__name__ = true;
tink_http_SimpleHandler.prototype = {
	process: function(req) {
		return this.f(req);
	}
};
var tink_http_ContentType = function() {
	this.subtype = "*";
	this.type = "*";
	this.extensions = new haxe_ds_StringMap();
};
tink_http_ContentType.__name__ = true;
tink_http_ContentType.ofString = function(s) {
	var ret = new tink_http_ContentType();
	ret.raw = s;
	var parsed = tink_http__$Header_HeaderValue_$Impl_$.parse(s);
	var value = parsed[0].value;
	var _g = value.indexOf("/");
	if(_g == -1) {
		ret.type = value;
	} else {
		var pos = _g;
		ret.type = value.substring(0,pos);
		ret.subtype = value.substring(pos + 1);
	}
	ret.extensions = parsed[0].extensions;
	return ret;
};
var tink_http_Header = function(fields) {
	var tmp;
	if(fields == null) {
		tmp = [];
	} else {
		var v = fields;
		tmp = v;
	}
	this.fields = tmp;
};
tink_http_Header.__name__ = true;
tink_http_Header.prototype = {
	get: function(name) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			if(f.name == name) {
				_g.push(f.value);
			}
		}
		return _g;
	}
	,byName: function(name) {
		var _g = this.get(name);
		switch(_g.length) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"No " + name + " header found",{ fileName : "tink/http/Header.hx", lineNumber : 91, className : "tink.http.Header", methodName : "byName"}));
		case 1:
			var v = _g[0];
			return tink_core_Outcome.Success(v);
		default:
			var v1 = _g;
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Multiple entries for " + name + " header",{ fileName : "tink/http/Header.hx", lineNumber : 95, className : "tink.http.Header", methodName : "byName"}));
		}
	}
	,contentType: function() {
		return tink_core_OutcomeTools.map(this.byName("content-type"),tink_http_ContentType.ofString);
	}
	,toString: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(f.toString());
		}
		return _g.join("\r\n") + "\r\n" + "\r\n";
	}
};
var tink_http__$Header_HeaderValue_$Impl_$ = {};
tink_http__$Header_HeaderValue_$Impl_$.__name__ = true;
tink_http__$Header_HeaderValue_$Impl_$.parse = function(this1) {
	return tink_http__$Header_HeaderValue_$Impl_$.parseWith(this1,function(_,params) {
		var _g = new haxe_ds_StringMap();
		var p = params;
		while(p.hasNext()) {
			var p1 = p.next();
			var key = p1.name;
			var value;
			var _g1 = tink_url__$Portion_Portion_$Impl_$.toString(p1.value);
			var quoted = _g1;
			if(HxOverrides.cca(quoted,0) == 34) {
				value = HxOverrides.substr(quoted,1,quoted.length - 2);
			} else {
				var v = _g1;
				value = v;
			}
			if(__map_reserved[key] != null) {
				_g.setReserved(key,value);
			} else {
				_g.h[key] = value;
			}
		}
		return _g;
	});
};
tink_http__$Header_HeaderValue_$Impl_$.parseWith = function(this1,parseExtension) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.split(",");
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		v = StringTools.trim(v);
		var i;
		var _g11 = v.indexOf(";");
		if(_g11 == -1) {
			i = v.length;
		} else {
			var i1 = _g11;
			i = i1;
		}
		var value = HxOverrides.substr(v,0,i);
		var sep = ";";
		var pos = i + 1;
		if(pos == null) {
			pos = 0;
		}
		if(sep == null) {
			sep = "&";
		}
		_g.push({ value : value, extensions : parseExtension(value,new tink_url__$Query_QueryStringParser(v,sep,"=",pos))});
	}
	return _g;
};
var tink_http_HeaderField = function(name,value) {
	tink_core_NamedWith.call(this,name,value);
};
tink_http_HeaderField.__name__ = true;
tink_http_HeaderField.__super__ = tink_core_NamedWith;
tink_http_HeaderField.prototype = $extend(tink_core_NamedWith.prototype,{
	toString: function() {
		if(this.value == null) {
			return this.name;
		} else {
			return "" + this.name + ": " + this.value;
		}
	}
});
var tink_http_Message = function(header,body) {
	this.header = header;
	this.body = body;
};
tink_http_Message.__name__ = true;
var tink_http_RequestHeader = function(method,url,protocol,fields) {
	if(protocol == null) {
		protocol = "HTTP/1.1";
	}
	this.method = method;
	this.url = url;
	this.protocol = protocol;
	tink_http_Header.call(this,fields);
};
tink_http_RequestHeader.__name__ = true;
tink_http_RequestHeader.__super__ = tink_http_Header;
tink_http_RequestHeader.prototype = $extend(tink_http_Header.prototype,{
	toString: function() {
		var this1 = this.url;
		return "" + this.method + " " + (this1.query == null ? this1.path : this1.path + "?" + this1.query) + " " + this.protocol + "\r\n" + tink_http_Header.prototype.toString.call(this);
	}
});
var tink_http_IncomingRequestHeader = function(method,url,protocol,fields) {
	tink_http_RequestHeader.call(this,method,url,protocol,fields);
};
tink_http_IncomingRequestHeader.__name__ = true;
tink_http_IncomingRequestHeader.fromIncomingMessage = function(req) {
	var req1 = req.method;
	var tmp = tink__$Url_Url_$Impl_$.fromString(req.url);
	var tmp1 = "HTTP/" + req.httpVersion;
	var _g = [];
	var _g1 = 0;
	var _g2 = req.rawHeaders.length / 2 | 0;
	while(_g1 < _g2) {
		var i = _g1++;
		var this1 = req.rawHeaders[2 * i].toLowerCase();
		_g.push(new tink_http_HeaderField(this1,req.rawHeaders[2 * i + 1]));
	}
	return new tink_http_IncomingRequestHeader(req1,tmp,tmp1,_g);
};
tink_http_IncomingRequestHeader.__super__ = tink_http_RequestHeader;
tink_http_IncomingRequestHeader.prototype = $extend(tink_http_RequestHeader.prototype,{
});
var tink_http_IncomingRequest = function(clientIp,header,body) {
	this.clientIp = clientIp;
	tink_http_Message.call(this,header,body);
};
tink_http_IncomingRequest.__name__ = true;
tink_http_IncomingRequest.__super__ = tink_http_Message;
tink_http_IncomingRequest.prototype = $extend(tink_http_Message.prototype,{
});
var tink_http_IncomingRequestBody = $hxEnums["tink.http.IncomingRequestBody"] = { __ename__ : true, __constructs__ : ["Plain","Parsed"]
	,Plain: ($_=function(source) { return {_hx_index:0,source:source,__enum__:"tink.http.IncomingRequestBody",toString:$estr}; },$_.__params__ = ["source"],$_)
	,Parsed: ($_=function(parts) { return {_hx_index:1,parts:parts,__enum__:"tink.http.IncomingRequestBody",toString:$estr}; },$_.__params__ = ["parts"],$_)
};
var tink_http_ResponseHeaderBase = function(statusCode,reason,fields,protocol) {
	if(protocol == null) {
		protocol = "HTTP/1.1";
	}
	this.statusCode = statusCode;
	var tmp;
	if(reason == null) {
		var this1 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(statusCode);
		tmp = this1;
	} else {
		tmp = reason;
	}
	this.reason = tmp;
	this.protocol = protocol;
	tink_http_Header.call(this,fields);
};
tink_http_ResponseHeaderBase.__name__ = true;
tink_http_ResponseHeaderBase.__super__ = tink_http_Header;
tink_http_ResponseHeaderBase.prototype = $extend(tink_http_Header.prototype,{
	concat: function(fields) {
		var statusCode = this.statusCode;
		var reason = this.reason;
		var fields1 = this.fields.concat(fields);
		var protocol = this.protocol;
		if(protocol == null) {
			protocol = "HTTP/1.1";
		}
		var this1 = new tink_http_ResponseHeaderBase(statusCode,reason,fields1,protocol);
		return this1;
	}
	,toString: function() {
		return "" + this.protocol + " " + this.statusCode + " " + this.reason + "\r\n" + tink_http_Header.prototype.toString.call(this);
	}
});
var tink_http__$Response_OutgoingResponseData = function(header,body) {
	tink_http_Message.call(this,header,body);
};
tink_http__$Response_OutgoingResponseData.__name__ = true;
tink_http__$Response_OutgoingResponseData.__super__ = tink_http_Message;
tink_http__$Response_OutgoingResponseData.prototype = $extend(tink_http_Message.prototype,{
});
var tink_http__$Response_OutgoingResponse_$Impl_$ = {};
tink_http__$Response_OutgoingResponse_$Impl_$.__name__ = true;
tink_http__$Response_OutgoingResponse_$Impl_$.reportError = function(e) {
	var code = e.code;
	if(code < 100 || code > 999) {
		code = 500;
	}
	var reason = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(code);
	var this1 = "Content-Type".toLowerCase();
	var this2 = new tink_http_ResponseHeaderBase(code,reason,[new tink_http_HeaderField(this1,"application/json")],"HTTP/1.1");
	var this3 = new tink_http__$Response_OutgoingResponseData(this2,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(JSON.stringify({ error : e.message, details : e.data}))))));
	return this3;
};
var tink_http_BodyPart = $hxEnums["tink.http.BodyPart"] = { __ename__ : true, __constructs__ : ["Value","File"]
	,Value: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.http.BodyPart",toString:$estr}; },$_.__params__ = ["v"],$_)
	,File: ($_=function(handle) { return {_hx_index:1,handle:handle,__enum__:"tink.http.BodyPart",toString:$estr}; },$_.__params__ = ["handle"],$_)
};
var tink_http_containers_NodeContainer = function(kind,opt) {
	this.kind = kind;
	this.upgradable = opt != null && opt.upgradable;
};
tink_http_containers_NodeContainer.__name__ = true;
tink_http_containers_NodeContainer.toNodeHandler = function(handler,options) {
	var body = options == null ? function(msg) {
		var options1 = null;
		if(options1 == null) {
			options1 = { };
		}
		return tink_http_IncomingRequestBody.Plain(tink_io_nodejs_NodejsSource.wrap("Incoming HTTP message from " + msg.socket.remoteAddress,msg,options1.chunkSize,options1.onEnd));
	} : options.body == null ? function(msg1) {
		var options2 = null;
		if(options2 == null) {
			options2 = { };
		}
		return tink_http_IncomingRequestBody.Plain(tink_io_nodejs_NodejsSource.wrap("Incoming HTTP message from " + msg1.socket.remoteAddress,msg1,options2.chunkSize,options2.onEnd));
	} : options.body;
	return function(req,res) {
		var req1 = req.socket.remoteAddress;
		var tmp = tink_http_IncomingRequestHeader.fromIncomingMessage(req);
		var tmp1 = body(req);
		handler.process(new tink_http_IncomingRequest(req1,tmp,tmp1)).handle(function(out) {
			var headers = new haxe_ds_StringMap();
			var h = HxOverrides.iter(out.header.fields);
			while(h.hasNext()) {
				var h1 = h.next();
				var key = h1.name;
				if(!(__map_reserved[key] != null ? headers.existsReserved(key) : headers.h.hasOwnProperty(key))) {
					var k = h1.name;
					var v = [];
					if(__map_reserved[k] != null) {
						headers.setReserved(k,v);
					} else {
						headers.h[k] = v;
					}
				}
				var key1 = h1.name;
				(__map_reserved[key1] != null ? headers.getReserved(key1) : headers.h[key1]).push(h1.value);
			}
			var name = headers.keys();
			while(name.hasNext()) {
				var name1 = name.next();
				var tmp2 = __map_reserved[name1] != null ? headers.getReserved(name1) : headers.h[name1];
				res.setHeader(name1,tmp2);
			}
			res.writeHead(out.header.statusCode,out.header.reason);
			tink_io__$Source_Source_$Impl_$.pipeTo(out.body,tink_io_nodejs_NodejsSink.wrap("Outgoing HTTP response to " + req.socket.remoteAddress,res)).handle(function(x) {
				res.end();
			});
		});
	};
};
tink_http_containers_NodeContainer.toUpgradeHandler = function(handler) {
	return function(req,socket,head) {
		var req1 = req.socket.remoteAddress;
		var tmp = tink_http_IncomingRequestHeader.fromIncomingMessage(req);
		var options = null;
		if(options == null) {
			options = { };
		}
		var tmp1 = tink_http_IncomingRequestBody.Plain(tink_io_nodejs_NodejsSource.wrap("Incoming HTTP message from " + req.socket.remoteAddress,socket,options.chunkSize,options.onEnd));
		handler.process(new tink_http_IncomingRequest(req1,tmp,tmp1)).handle(function(out) {
			tink_io__$Source_Source_$Impl_$.pipeTo(out.body.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(out.header.toString()))))),tink_io_nodejs_NodejsSink.wrap("Outgoing HTTP response to " + req.socket.remoteAddress,socket)).handle(function(_) {
				socket.end();
			});
		});
	};
};
tink_http_containers_NodeContainer.prototype = {
	run: function(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var failures = tink_core__$Signal_Signal_$Impl_$.trigger();
			var server;
			var _g = _gthis.kind;
			switch(_g._hx_index) {
			case 0:
				var server1 = _g.server;
				server = server1;
				break;
			case 1:
				var port = _g.port;
				var server2 = new js_node_http_Server();
				server2.listen(port);
				server = server2;
				break;
			case 2:
				var host = _g.host;
				var server3 = new js_node_http_Server();
				server3.listen(tink_url__$Host_Host_$Impl_$.get_port(host),tink_url__$Host_Host_$Impl_$.get_name(host));
				server = server3;
				break;
			case 3:
				var path = _g.path;
				var server4 = new js_node_http_Server();
				server4.listen(path);
				server = server4;
				break;
			case 4:
				var fd = _g.fd;
				var server5 = new js_node_http_Server();
				server5.listen(fd);
				server = server5;
				break;
			}
			var tinkify = function(e) {
				return tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/http/containers/NodeContainer.hx", lineNumber : 97, className : "tink.http.containers.NodeContainer", methodName : "run"});
			};
			server.on("error",function(e1) {
				cb(tink_http_ContainerResult.Failed(e1));
			});
			if(_gthis.upgradable) {
				var tmp = tink_http_containers_NodeContainer.toUpgradeHandler(handler);
				server.on("upgrade",tmp);
			}
			var onListen = function() {
				var onListen1 = tink_http_ContainerResult.Running({ shutdown : function(hard) {
					if(hard) {
						console.log("tink/http/containers/NodeContainer.hx:110:","Warning: hard shutdown not implemented");
					}
					var ret = tink_core__$Future_Future_$Impl_$.async(function(cb1) {
						server.close(function() {
							cb1(true);
						});
					}).map(tink_core_Outcome.Success);
					return ret.gather();
				}, failures : failures});
				cb(onListen1);
			};
			if(server.listening) {
				onListen();
			} else {
				server.on("listening",onListen);
			}
			var tmp1 = tink_http_containers_NodeContainer.toNodeHandler(handler);
			server.on("request",tmp1);
			server.on("error",function(e2) {
				cb(tink_http_ContainerResult.Failed(e2));
			});
		});
	}
};
var tink_http_containers__$NodeContainer_ServerKindBase = $hxEnums["tink.http.containers._NodeContainer.ServerKindBase"] = { __ename__ : true, __constructs__ : ["Instance","Port","Host","Path","Fd"]
	,Instance: ($_=function(server) { return {_hx_index:0,server:server,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["server"],$_)
	,Port: ($_=function(port) { return {_hx_index:1,port:port,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["port"],$_)
	,Host: ($_=function(host) { return {_hx_index:2,host:host,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["host"],$_)
	,Path: ($_=function(path) { return {_hx_index:3,path:path,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["path"],$_)
	,Fd: ($_=function(fd) { return {_hx_index:4,fd:fd,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["fd"],$_)
};
var tink_http_middleware_CrossOriginResourceSharing = function(processor) {
	this.processor = processor;
};
tink_http_middleware_CrossOriginResourceSharing.__name__ = true;
tink_http_middleware_CrossOriginResourceSharing.prototype = {
	apply: function(handler) {
		var _gthis = this;
		return new tink_http_SimpleHandler(function(req) {
			var ret = _gthis.processor({ header : req.header, origin : tink_core_OutcomeTools.orNull(req.header.byName("origin")), requestMethod : tink_core_OutcomeTools.orNull(req.header.byName("access-control-request-method")), requestHeaders : tink_core_OutcomeTools.orNull(tink_core_OutcomeTools.map(req.header.byName("access-control-request-headers"),function(a) {
				var _this = a.split(",");
				var f = StringTools.trim;
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					result[i] = f(_this[i]);
				}
				return result;
			}))}).map(function(res) {
				var headers = [];
				if(res.allowOrigin != null) {
					headers.push(new tink_http_HeaderField("access-control-allow-origin",res.allowOrigin));
					if(res.allowOrigin != "*") {
						headers.push(new tink_http_HeaderField("vary","Origin"));
					}
				}
				if(res.allowCredentials == true) {
					headers.push(new tink_http_HeaderField("access-control-allow-credentials","true"));
				}
				if(res.exposeHeaders != null) {
					headers.push(new tink_http_HeaderField("access-control-expose-headers",res.exposeHeaders.join(", ")));
				}
				if(res.maxAge != null) {
					headers.push(new tink_http_HeaderField("access-control-max-age",res.maxAge == null ? "null" : "" + res.maxAge));
				}
				if(res.allowMethods != null) {
					headers.push(new tink_http_HeaderField("access-control-allow-methods",res.allowMethods.join(", ")));
				}
				if(res.allowHeaders != null) {
					headers.push(new tink_http_HeaderField("access-control-allow-headers",res.allowHeaders.join(", ")));
				}
				return headers;
			});
			var ret1 = ret.gather().flatMap(function(headers1) {
				if(req.header.method == "OPTIONS") {
					var this1 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(200);
					var this2 = new tink_http_ResponseHeaderBase(200,this1,headers1,"HTTP/1.1");
					var this3 = new tink_http__$Response_OutgoingResponseData(this2,tink_io__$Source_Source_$Impl_$.EMPTY);
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(this3));
				} else {
					var ret2 = handler.process(req).map(function(res1) {
						var this4 = new tink_http__$Response_OutgoingResponseData(res1.header.concat(headers1),res1.body);
						return this4;
					});
					return ret2.gather();
				}
			});
			return ret1.gather();
		});
	}
};
var tink_http_middleware__$CrossOriginResourceSharing_CorsProcessor_$Impl_$ = {};
tink_http_middleware__$CrossOriginResourceSharing_CorsProcessor_$Impl_$.__name__ = true;
tink_http_middleware__$CrossOriginResourceSharing_CorsProcessor_$Impl_$.regex = function(ex,credentials) {
	return function(req) {
		var match = req.origin != null && ex.match(req.origin);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(match ? { allowOrigin : req.origin, allowMethods : ["HEAD","GET","POST","PUT","PATCH","DELETE"], allowHeaders : req.requestHeaders, allowCredentials : credentials} : { }));
	};
};
var tink_io_PipeResult = $hxEnums["tink.io.PipeResult"] = { __ename__ : true, __constructs__ : ["AllWritten","SinkEnded","SinkFailed","SourceFailed"]
	,AllWritten: {_hx_index:0,__enum__:"tink.io.PipeResult",toString:$estr}
	,SinkEnded: ($_=function(result,rest) { return {_hx_index:1,result:result,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["result","rest"],$_)
	,SinkFailed: ($_=function(e,rest) { return {_hx_index:2,e:e,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["e","rest"],$_)
	,SourceFailed: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_io_PipeResultTools = function() { };
tink_io_PipeResultTools.__name__ = true;
tink_io_PipeResultTools.toResult = function(c,result,buffered) {
	var mk = function(s) {
		if(buffered == null) {
			return s;
		} else {
			var v = buffered;
			return s.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(v)));
		}
	};
	switch(c._hx_index) {
	case 0:
		var rest = c.rest;
		return tink_io_PipeResult.SinkEnded(result,mk(rest));
	case 1:
		var rest1 = c.at;
		var e = c.error;
		return tink_io_PipeResult.SinkFailed(e,mk(rest1));
	case 2:
		var e1 = c.error;
		return tink_io_PipeResult.SourceFailed(e1);
	case 3:
		return tink_io_PipeResult.AllWritten;
	}
};
var tink_io_SinkBase = function() { };
tink_io_SinkBase.__name__ = true;
tink_io_SinkBase.prototype = {
	consume: function(source,options) {
		throw new js__$Boot_HaxeError("not implemented");
	}
};
var tink_streams_StreamBase = function() {
};
tink_streams_StreamBase.__name__ = true;
tink_streams_StreamBase.prototype = {
	get_depleted: function() {
		return false;
	}
	,prepend: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([other,this]);
		}
	}
	,decompose: function(into) {
		if(!this.get_depleted()) {
			into.push(this);
		}
	}
	,reduce: function(initial,reducer) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(item) {
				var ret = reducer(initial,item).map(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.result;
						initial = v;
						return tink_streams_Handled.Resume;
					case 1:
						var e = o.e;
						return tink_streams_Handled.Clog(e);
					}
				});
				return ret.gather();
			})).handle(function(c) {
				switch(c._hx_index) {
				case 0:
					var _g3 = c.rest;
					throw new js__$Boot_HaxeError("assert");
				case 1:
					var rest = c.at;
					var e1 = c.error;
					cb(tink_streams_Reduction.Crashed(e1,rest));
					break;
				case 2:
					var e2 = c.error;
					cb(tink_streams_Reduction.Failed(e2));
					break;
				case 3:
					cb(tink_streams_Reduction.Reduced(initial));
					break;
				}
			});
		},true);
	}
	,forEach: function(handler) {
		throw new js__$Boot_HaxeError("not implemented");
	}
};
var tink_streams_Empty = function() {
	tink_streams_StreamBase.call(this);
};
tink_streams_Empty.__name__ = true;
tink_streams_Empty.__super__ = tink_streams_StreamBase;
tink_streams_Empty.prototype = $extend(tink_streams_StreamBase.prototype,{
	get_depleted: function() {
		return true;
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Depleted));
	}
});
var tink_io__$Source_Source_$Impl_$ = {};
tink_io__$Source_Source_$Impl_$.__name__ = true;
tink_io__$Source_Source_$Impl_$.ofError = function(e) {
	return tink_streams__$Stream_Stream_$Impl_$.ofError(e);
};
tink_io__$Source_Source_$Impl_$.concatAll = function(s) {
	return s.reduce(tink__$Chunk_Chunk_$Impl_$.EMPTY,tink_streams__$Stream_Reducer_$Impl_$.ofSafe(function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(tink__$Chunk_Chunk_$Impl_$.catChunk(res,cur))));
	}));
};
tink_io__$Source_Source_$Impl_$.pipeTo = function(this1,target,options) {
	return target.consume(this1,options);
};
var tink_io_RealSourceTools = function() { };
tink_io_RealSourceTools.__name__ = true;
tink_io_RealSourceTools.all = function(s) {
	var ret = tink_io__$Source_Source_$Impl_$.concatAll(s).map(function(o) {
		switch(o._hx_index) {
		case 1:
			var e = o.error;
			return tink_core_Outcome.Failure(e);
		case 2:
			var c = o.result;
			return tink_core_Outcome.Success(c);
		}
	});
	return ret.gather();
};
var tink_streams_Generator = function(upcoming) {
	tink_streams_StreamBase.call(this);
	this.upcoming = upcoming;
};
tink_streams_Generator.__name__ = true;
tink_streams_Generator.__super__ = tink_streams_StreamBase;
tink_streams_Generator.prototype = $extend(tink_streams_StreamBase.prototype,{
	forEach: function(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.upcoming.handle(function(e) {
				switch(e._hx_index) {
				case 0:
					var then = e.next;
					var v = e.value;
					handler(v).handle(function(s) {
						switch(s._hx_index) {
						case 0:
							cb(tink_streams_Conclusion.Halted(_gthis));
							break;
						case 1:
							cb(tink_streams_Conclusion.Halted(then));
							break;
						case 2:
							then.forEach(handler).handle(cb);
							break;
						case 3:
							var e1 = s.e;
							cb(tink_streams_Conclusion.Clogged(e1,_gthis));
							break;
						}
					});
					break;
				case 1:
					var e2 = e.e;
					cb(tink_streams_Conclusion.Failed(e2));
					break;
				case 2:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		},true);
	}
});
var tink_io_nodejs_NodejsSink = function(target) {
	this.target = target;
};
tink_io_nodejs_NodejsSink.__name__ = true;
tink_io_nodejs_NodejsSink.wrap = function(name,native) {
	return new tink_io_nodejs_NodejsSink(new tink_io_nodejs_WrappedWritable(name,native));
};
tink_io_nodejs_NodejsSink.__super__ = tink_io_SinkBase;
tink_io_nodejs_NodejsSink.prototype = $extend(tink_io_SinkBase.prototype,{
	consume: function(source,options) {
		var _gthis = this;
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(c) {
			var ret1 = _gthis.target.write(c).map(function(w) {
				switch(w._hx_index) {
				case 0:
					if(w.data) {
						return tink_streams_Handled.Resume;
					} else {
						return tink_streams_Handled.BackOff;
					}
					break;
				case 1:
					var e = w.failure;
					return tink_streams_Handled.Clog(e);
				}
			});
			return ret1.gather();
		}));
		if(options != null && options.end) {
			ret.handle(function(end) {
				_gthis.target.end();
			});
		}
		var ret2 = ret.map(function(c1) {
			return tink_io_PipeResultTools.toResult(c1,tink_core_Noise.Noise);
		});
		return ret2.gather();
	}
});
var tink_io_nodejs_NodejsSource = function(target) {
	tink_streams_Generator.call(this,tink_core__$Future_Future_$Impl_$.async(function(cb) {
		target.read().handle(function(o) {
			var tmp;
			switch(o._hx_index) {
			case 0:
				var _g = o.data;
				if(_g == null) {
					tmp = tink_streams_Step.End;
				} else {
					var chunk = _g;
					tmp = tink_streams_Step.Link(chunk,new tink_io_nodejs_NodejsSource(target));
				}
				break;
			case 1:
				var e = o.failure;
				tmp = tink_streams_Step.Fail(e);
				break;
			}
			cb(tmp);
		});
	},true));
};
tink_io_nodejs_NodejsSource.__name__ = true;
tink_io_nodejs_NodejsSource.wrap = function(name,native,chunkSize,onEnd) {
	return new tink_io_nodejs_NodejsSource(new tink_io_nodejs_WrappedReadable(name,native,chunkSize,onEnd));
};
tink_io_nodejs_NodejsSource.__super__ = tink_streams_Generator;
tink_io_nodejs_NodejsSource.prototype = $extend(tink_streams_Generator.prototype,{
});
var tink_io_nodejs_WrappedReadable = function(name,native,chunkSize,onEnd) {
	this.name = name;
	this.native = native;
	this.chunkSize = chunkSize;
	this.end = tink_core__$Future_Future_$Impl_$.async(function(cb) {
		native.once("end",function() {
			cb(tink_core_Outcome.Success(null));
		});
		native.once("error",function(e) {
			var tmp = tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + " - Failed reading from " + name + " because " + e.message,{ fileName : "tink/io/nodejs/WrappedReadable.hx", lineNumber : 22, className : "tink.io.nodejs.WrappedReadable", methodName : "new"}));
			cb(tmp);
		});
	}).eager();
	if(onEnd != null) {
		this.end.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
			process.nextTick(onEnd);
		}));
	}
};
tink_io_nodejs_WrappedReadable.__name__ = true;
tink_io_nodejs_WrappedReadable.prototype = {
	read: function() {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.first(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var attempt = null;
			attempt = function() {
				try {
					var _g = _gthis.native.read(_gthis.chunkSize);
					if(_g == null) {
						_gthis.native.once("readable",attempt);
					} else {
						var chunk = _g;
						var buf = typeof(chunk) == "string" ? new js_node_buffer_Buffer(chunk) : chunk;
						var attempt1 = tink_core_Outcome.Success(new tink_chunk_nodejs_BufferChunk(buf));
						cb(attempt1);
					}
				} catch( e ) {
					var attempt2 = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error while reading from " + _gthis.name,((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "tink/io/nodejs/WrappedReadable.hx", lineNumber : 48, className : "tink.io.nodejs.WrappedReadable", methodName : "read"}));
					cb(attempt2);
				}
			};
			attempt();
		}),this.end);
	}
};
var tink_io_nodejs_WrappedWritable = function(name,native) {
	this.name = name;
	this.native = native;
	this.ended = tink_core__$Future_Future_$Impl_$.async(function(cb) {
		native.once("end",function() {
			cb(tink_core_Outcome.Success(false));
		});
		native.once("finish",function() {
			cb(tink_core_Outcome.Success(false));
		});
		native.once("close",function() {
			cb(tink_core_Outcome.Success(false));
		});
		native.on("error",function(e) {
			var tmp = tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + ": " + e.message,{ fileName : "tink/io/nodejs/WrappedWritable.hx", lineNumber : 24, className : "tink.io.nodejs.WrappedWritable", methodName : "new"}));
			cb(tmp);
		});
	});
};
tink_io_nodejs_WrappedWritable.__name__ = true;
tink_io_nodejs_WrappedWritable.prototype = {
	end: function() {
		var didEnd = false;
		var this1 = this.ended.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
			didEnd = true;
		}));
		if(this1 != null) {
			this1.cancel();
		}
		if(didEnd) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(false)));
		}
		this.native.end();
		return tink_core__$Promise_Promise_$Impl_$.next(this.ended,function(_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(true)));
		});
	}
	,write: function(chunk) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.first(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			if(chunk.getLength() == 0) {
				cb(tink_core_Outcome.Success(true));
				return;
			}
			var buf;
			if(js_node_buffer_Buffer.isBuffer(chunk.buffer)) {
				buf = chunk.buffer;
			} else {
				var b = chunk.toBytes();
				var data = b.b;
				buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
			}
			var f = cb;
			var a1 = tink_core_Outcome.Success(true);
			var tmp = function() {
				f(a1);
			};
			_gthis.native.write(buf,null,tmp);
		}),this.ended);
	}
};
var tink_json__$Parser_SliceData = function(source,min,max) {
	this.source = source;
	this.min = min;
	this.max = max;
};
tink_json__$Parser_SliceData.__name__ = true;
var tink_json__$Parser_JsonString_$Impl_$ = {};
tink_json__$Parser_JsonString_$Impl_$.__name__ = true;
tink_json__$Parser_JsonString_$Impl_$.contains = function(this1,s) {
	var _g = this1.source.indexOf(s,this1.min);
	if(_g == -1) {
		return false;
	} else {
		var outside = _g;
		if(outside > this1.max) {
			return false;
		} else {
			var v = _g;
			return true;
		}
	}
};
tink_json__$Parser_JsonString_$Impl_$.toString = function(this1) {
	if(tink_json__$Parser_JsonString_$Impl_$.contains(this1,"\\")) {
		return JSON.parse(this1.source.substring(this1.min - 1,this1.max + 1));
	} else {
		return this1.source.substring(this1.min,this1.max);
	}
};
var tink_json_BasicParser = function() {
	this.plugins = new tink_core_Annex(this);
};
tink_json_BasicParser.__name__ = true;
tink_json_BasicParser.prototype = {
	init: function(source) {
		this.source = source;
		this.pos = 0;
		this.max = source.length;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
	}
	,parseString: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var e;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 34) {
			this.pos += 1;
			e = true;
		} else {
			e = false;
		}
		var e1 = !e ? this.die("Expected string") : null;
		return this.parseRestOfString();
	}
	,parseRestOfString: function() {
		return this.slice(this.skipString(),this.pos - 1);
	}
	,skipString: function() {
		var start = this.pos;
		while(true) {
			var _g = this.source.indexOf("\"",this.pos);
			if(_g == -1) {
				this.die("unterminated string",start);
			} else {
				var v = _g;
				this.pos = v + 1;
				var p = this.pos - 2;
				while(this.source.charCodeAt(p) == 92) --p;
				if((p - this.pos & 1) == 0) {
					break;
				}
			}
		}
		return start;
	}
	,invalidNumber: function(start) {
		return this.die("Invalid number " + this.source.substring(start,this.pos),start);
	}
	,skipNumber: function(c) {
		var start = this.pos - 1;
		var minus = c == 45;
		var digit = !minus;
		var zero = c == 48;
		var point = false;
		var e = false;
		var pm = false;
		var end = false;
		while(true) {
			c = this.source.charCodeAt(this.pos++);
			switch(c) {
			case 43:case 45:
				if(!e || pm) {
					this.invalidNumber(start);
				}
				digit = false;
				pm = true;
				break;
			case 46:
				if(minus || point) {
					this.invalidNumber(start);
				}
				digit = false;
				point = true;
				break;
			case 48:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
					zero = true;
				}
				digit = true;
				break;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
				}
				digit = true;
				zero = false;
				break;
			case 69:case 101:
				if(minus || zero || e) {
					this.invalidNumber(start);
				}
				digit = false;
				e = true;
				break;
			default:
				if(!digit) {
					this.invalidNumber(start);
				}
				this.pos--;
				end = true;
			}
			if(end) {
				break;
			}
		}
		return start;
	}
	,slice: function(from,to) {
		return new tink_json__$Parser_SliceData(this.source,from,to);
	}
	,skipArray: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			return;
		}
		while(true) {
			this.skipValue();
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp1;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				break;
			}
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp2;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
			this.pos += 1;
			tmp2 = true;
		} else {
			tmp2 = false;
		}
		if(!tmp2) {
			this.die("Expected ]");
		}
	}
	,skipValue: function() {
		var _gthis = this;
		var _g = this.source.charCodeAt(this.pos++);
		switch(_g) {
		case 34:
			this.skipString();
			break;
		case 91:
			this.skipArray();
			break;
		case 102:
			var tmp;
			if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 97 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 115 && this.source.charCodeAt(this.pos + 3) == 101) {
				this.pos += 4;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected alse");
			}
			break;
		case 110:
			var tmp1;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 117 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 108) {
				this.pos += 3;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				this.die("Expected ull");
			}
			break;
		case 116:
			var tmp2;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 114 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 101) {
				this.pos += 3;
				tmp2 = true;
			} else {
				tmp2 = false;
			}
			if(!tmp2) {
				this.die("Expected rue");
			}
			break;
		case 123:
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp3;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp3 = true;
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				return;
			}
			while(true) {
				if(_gthis.source.charCodeAt(_gthis.pos++) != 34) {
					_gthis.die("expected string",_gthis.pos - 1);
				}
				_gthis.skipString();
				while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
				var tmp4;
				if(_gthis.max > _gthis.pos && _gthis.source.charCodeAt(_gthis.pos) == 58) {
					_gthis.pos += 1;
					while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
					tmp4 = true;
				} else {
					tmp4 = false;
				}
				if(!tmp4) {
					_gthis.die("Expected :");
				}
				_gthis.skipValue();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp5;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp5 = true;
				} else {
					tmp5 = false;
				}
				if(!tmp5) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp6;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				tmp6 = true;
			} else {
				tmp6 = false;
			}
			if(!tmp6) {
				this.die("Expected }");
			}
			break;
		default:
			var char = _g;
			if(char == 46 || char == 45 || char < 58 && char > 47) {
				this.skipNumber(char);
			} else {
				this.invalidChar(char);
			}
		}
	}
	,invalidChar: function(c) {
		return this.die("invalid char " + StringTools.hex(c,2),this.pos - 1);
	}
	,die: function(s,pos,end) {
		if(pos == null) {
			pos = this.pos;
			end = pos;
		} else if(end == null) {
			end = this.pos;
		}
		if(end <= pos) {
			end = pos + 1;
		}
		var range = end > pos + 1 ? "characters " + pos + " - " + end : "character " + pos;
		var clip = function(s1,maxLength,left) {
			if(s1.length > maxLength) {
				if(left) {
					return "... " + HxOverrides.substr(s1,s1.length - maxLength,null);
				} else {
					return HxOverrides.substr(s1,0,maxLength) + " ...";
				}
			} else {
				return s1;
			}
		};
		var p = pos + end;
		var center = p >> 1;
		var context = clip(this.source.substring(0,pos),20,true) + "  ---->  " + clip(this.source.substring(pos,center),20,false) + clip(this.source.substring(center,end),20,true) + "  <----  " + clip(this.source.substring(end),20,false);
		return tink_core_TypedError.withData(422,s + (" at " + range + " in " + context),{ source : this.source, start : pos, end : end},{ fileName : "tink/json/Parser.hx", lineNumber : 354, className : "tink.json.BasicParser", methodName : "die"}).throwSelf();
	}
};
var tink_json_Parser0 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser0.__name__ = true;
tink_json_Parser0.__super__ = tink_json_BasicParser;
tink_json_Parser0.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var _gthis = this;
		var v__0 = null;
		var hasv__0 = false;
		var v__1 = null;
		var v__2 = null;
		var hasv__2 = false;
		var v__3 = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("subject".length == __name__.max - __name__.min && __name__.source.startsWith("subject",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v__31;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v__31 = true;
					} else {
						v__31 = false;
					}
					v__3 = v__31 ? null : tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
				} else if("name".length == __name__.max - __name__.min && __name__.source.startsWith("name",__name__.min)) {
					v__2 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					hasv__2 = true;
				} else if("message".length == __name__.max - __name__.min && __name__.source.startsWith("message",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v__11;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v__11 = true;
					} else {
						v__11 = false;
					}
					v__1 = v__11 ? null : tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
				} else if("mail".length == __name__.max - __name__.min && __name__.source.startsWith("mail",__name__.min)) {
					v__0 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					hasv__0 = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { _0 : hasv__0 ? v__0 : __missing__("mail"), _1 : v__1, _2 : hasv__2 ? v__2 : __missing__("name"), _3 : v__3};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "tink/json/macros/Macro.hx", lineNumber : 93, className : "tink.json.Parser0", methodName : "tryParse"});
	}
});
var tink_json_Value = $hxEnums["tink.json.Value"] = { __ename__ : true, __constructs__ : ["VNumber","VString","VNull","VBool","VArray","VObject"]
	,VNumber: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["f"],$_)
	,VString: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["s"],$_)
	,VNull: {_hx_index:2,__enum__:"tink.json.Value",toString:$estr}
	,VBool: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["b"],$_)
	,VArray: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["a"],$_)
	,VObject: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["a"],$_)
};
var tink_querystring__$Pairs_Pairs_$Impl_$ = {};
tink_querystring__$Pairs_Pairs_$Impl_$.__name__ = true;
tink_querystring__$Pairs_Pairs_$Impl_$.ofIterable = function(i) {
	return $getIterator(i);
};
var tink_querystring_ParserBase = function(onError,pos) {
	this.pos = pos;
	var tmp;
	if(onError == null) {
		tmp = $bind(this,this.abort);
	} else {
		var v = onError;
		tmp = v;
	}
	this.onError = tmp;
};
tink_querystring_ParserBase.__name__ = true;
tink_querystring_ParserBase.prototype = {
	init: function(input,name,value) {
		this.params = new haxe_ds_StringMap();
		this.exists = new haxe_ds_StringMap();
		if(input != null) {
			var pair = input;
			while(pair.hasNext()) {
				var pair1 = pair.next();
				var name1 = name(pair1);
				var this1 = this.params;
				var v = value(pair1);
				var _this = this1;
				if(__map_reserved[name1] != null) {
					_this.setReserved(name1,v);
				} else {
					_this.h[name1] = v;
				}
				var end = name1.length;
				while(end > 0) {
					name1 = name1.substring(0,end);
					var _this1 = this.exists;
					if(__map_reserved[name1] != null ? _this1.getReserved(name1) : _this1.h[name1]) {
						break;
					}
					var _this2 = this.exists;
					if(__map_reserved[name1] != null) {
						_this2.setReserved(name1,true);
					} else {
						_this2.h[name1] = true;
					}
					var _g = name1.lastIndexOf(".",end);
					var b = _g;
					var a = name1.lastIndexOf("[",end);
					if(a > b) {
						end = a;
					} else {
						var b1 = _g;
						end = b1;
					}
				}
			}
		}
	}
	,abort: function(e) {
		throw new js__$Boot_HaxeError(this.error("" + e.reason + " for " + e.name));
	}
	,parse: function(input) {
		throw new js__$Boot_HaxeError(tink_core_TypedError.withData(501,"not implemented",this.pos,{ fileName : "tink/querystring/Parser.hx", lineNumber : 58, className : "tink.querystring.ParserBase", methodName : "parse"}));
	}
	,tryParse: function(input) {
		try {
			return tink_core_Outcome.Success(this.parse(input));
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof tink_core_TypedError)) {
				return tink_core_Outcome.Failure(e1);
			} else {
				return tink_core_Outcome.Failure(this.error("Parse Error",e1));
			}
		}
	}
	,error: function(reason,data) {
		return tink_core_TypedError.withData(422,reason,data,this.pos);
	}
	,fail: function(field,reason) {
		tink_core__$Callback_Callback_$Impl_$.invoke(this.onError,{ name : field, reason : reason});
		return null;
	}
	,missing: function(name) {
		return this.fail(name,"Missing value");
	}
};
var tink_querystring_Parser0 = function(onError,pos) {
	tink_querystring_ParserBase.call(this,onError,pos);
};
tink_querystring_Parser0.__name__ = true;
tink_querystring_Parser0.__super__ = tink_querystring_ParserBase;
tink_querystring_Parser0.prototype = $extend(tink_querystring_ParserBase.prototype,{
	getName: function(p) {
		return p.name;
	}
	,getValue: function(p) {
		return p.value;
	}
	,parse: function(input) {
		var prefix = "";
		this.init(input,$bind(this,this.getName),$bind(this,this.getValue));
		return this.parse0(prefix);
	}
	,parse0: function(prefix) {
		var prefix1;
		if(prefix == "") {
			prefix1 = "mail";
		} else {
			var v = prefix;
			prefix1 = v + ".mail";
		}
		var __o;
		var _this = this.exists;
		if(__map_reserved[prefix1] != null ? _this.getReserved(prefix1) : _this.h[prefix1]) {
			var _this1 = this.params;
			__o = tink_web_forms__$FormField_FormField_$Impl_$.toString(__map_reserved[prefix1] != null ? _this1.getReserved(prefix1) : _this1.h[prefix1]);
		} else {
			__o = this.missing(prefix1);
		}
		var prefix2;
		if(prefix == "") {
			prefix2 = "name";
		} else {
			var v1 = prefix;
			prefix2 = v1 + ".name";
		}
		var __o1;
		var _this2 = this.exists;
		if(__map_reserved[prefix2] != null ? _this2.getReserved(prefix2) : _this2.h[prefix2]) {
			var _this3 = this.params;
			__o1 = tink_web_forms__$FormField_FormField_$Impl_$.toString(__map_reserved[prefix2] != null ? _this3.getReserved(prefix2) : _this3.h[prefix2]);
		} else {
			__o1 = this.missing(prefix2);
		}
		var __o2 = { _0 : __o, _2 : __o1};
		var prefix3;
		if(prefix == "") {
			prefix3 = "message";
		} else {
			var v2 = prefix;
			prefix3 = v2 + ".message";
		}
		var _this4 = this.exists;
		if(__map_reserved[prefix3] != null ? _this4.getReserved(prefix3) : _this4.h[prefix3]) {
			var tmp;
			var _this5 = this.exists;
			if(__map_reserved[prefix3] != null ? _this5.getReserved(prefix3) : _this5.h[prefix3]) {
				var _this6 = this.exists;
				if(__map_reserved[prefix3] != null ? _this6.getReserved(prefix3) : _this6.h[prefix3]) {
					var _this7 = this.params;
					tmp = tink_web_forms__$FormField_FormField_$Impl_$.toString(__map_reserved[prefix3] != null ? _this7.getReserved(prefix3) : _this7.h[prefix3]);
				} else {
					tmp = this.missing(prefix3);
				}
			} else {
				tmp = null;
			}
			__o2._1 = tmp;
		}
		var prefix4;
		if(prefix == "") {
			prefix4 = "subject";
		} else {
			var v3 = prefix;
			prefix4 = v3 + ".subject";
		}
		var _this8 = this.exists;
		if(__map_reserved[prefix4] != null ? _this8.getReserved(prefix4) : _this8.h[prefix4]) {
			var tmp1;
			var _this9 = this.exists;
			if(__map_reserved[prefix4] != null ? _this9.getReserved(prefix4) : _this9.h[prefix4]) {
				var _this10 = this.exists;
				if(__map_reserved[prefix4] != null ? _this10.getReserved(prefix4) : _this10.h[prefix4]) {
					var _this11 = this.params;
					tmp1 = tink_web_forms__$FormField_FormField_$Impl_$.toString(__map_reserved[prefix4] != null ? _this11.getReserved(prefix4) : _this11.h[prefix4]);
				} else {
					tmp1 = this.missing(prefix4);
				}
			} else {
				tmp1 = null;
			}
			__o2._3 = tmp1;
		}
		return __o2;
	}
});
var tink_streams__$Stream_Stream_$Impl_$ = {};
tink_streams__$Stream_Stream_$Impl_$.__name__ = true;
tink_streams__$Stream_Stream_$Impl_$.ofError = function(e) {
	return new tink_streams__$Stream_ErrorStream(e);
};
var tink_streams__$Stream_CompoundStream = function(parts) {
	tink_streams_StreamBase.call(this);
	this.parts = parts;
};
tink_streams__$Stream_CompoundStream.__name__ = true;
tink_streams__$Stream_CompoundStream.consumeParts = function(parts,handler,cb) {
	if(parts.length == 0) {
		cb(tink_streams_Conclusion.Depleted);
	} else {
		parts[0].forEach(handler).handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var rest = o.rest;
				parts = parts.slice();
				parts[0] = rest;
				var tmp = tink_streams_Conclusion.Halted(new tink_streams__$Stream_CompoundStream(parts));
				cb(tmp);
				break;
			case 1:
				var at = o.at;
				var e = o.error;
				if(at.get_depleted()) {
					parts = parts.slice(1);
				} else {
					parts = parts.slice();
					parts[0] = at;
				}
				var tmp1 = tink_streams_Conclusion.Clogged(e,new tink_streams__$Stream_CompoundStream(parts));
				cb(tmp1);
				break;
			case 2:
				var e1 = o.error;
				cb(tink_streams_Conclusion.Failed(e1));
				break;
			case 3:
				tink_streams__$Stream_CompoundStream.consumeParts(parts.slice(1),handler,cb);
				break;
			}
		});
	}
};
tink_streams__$Stream_CompoundStream.of = function(streams) {
	var ret = [];
	var _g = 0;
	while(_g < streams.length) {
		var s = streams[_g];
		++_g;
		s.decompose(ret);
	}
	if(ret.length == 0) {
		return tink_streams_Empty.inst;
	} else {
		return new tink_streams__$Stream_CompoundStream(ret);
	}
};
tink_streams__$Stream_CompoundStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_CompoundStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	get_depleted: function() {
		switch(this.parts.length) {
		case 0:
			return true;
		case 1:
			return this.parts[0].get_depleted();
		default:
			return false;
		}
	}
	,decompose: function(into) {
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.decompose(into);
		}
	}
	,forEach: function(handler) {
		var parts = this.parts;
		var handler1 = handler;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			tink_streams__$Stream_CompoundStream.consumeParts(parts,handler1,cb);
		});
	}
});
var tink_streams_Handled = $hxEnums["tink.streams.Handled"] = { __ename__ : true, __constructs__ : ["BackOff","Finish","Resume","Clog"]
	,BackOff: {_hx_index:0,__enum__:"tink.streams.Handled",toString:$estr}
	,Finish: {_hx_index:1,__enum__:"tink.streams.Handled",toString:$estr}
	,Resume: {_hx_index:2,__enum__:"tink.streams.Handled",toString:$estr}
	,Clog: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.Handled",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Conclusion = $hxEnums["tink.streams.Conclusion"] = { __ename__ : true, __constructs__ : ["Halted","Clogged","Failed","Depleted"]
	,Halted: ($_=function(rest) { return {_hx_index:0,rest:rest,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["rest"],$_)
	,Clogged: ($_=function(error,at) { return {_hx_index:1,error:error,at:at,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:2,error:error,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Depleted: {_hx_index:3,__enum__:"tink.streams.Conclusion",toString:$estr}
};
var tink_streams_ReductionStep = $hxEnums["tink.streams.ReductionStep"] = { __ename__ : true, __constructs__ : ["Progress","Crash"]
	,Progress: ($_=function(result) { return {_hx_index:0,result:result,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["result"],$_)
	,Crash: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Reduction = $hxEnums["tink.streams.Reduction"] = { __ename__ : true, __constructs__ : ["Crashed","Failed","Reduced"]
	,Crashed: ($_=function(error,at) { return {_hx_index:0,error:error,at:at,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:1,error:error,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Reduced: ($_=function(result) { return {_hx_index:2,result:result,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["result"],$_)
};
var tink_streams__$Stream_ErrorStream = function(error) {
	tink_streams_StreamBase.call(this);
	this.error = error;
};
tink_streams__$Stream_ErrorStream.__name__ = true;
tink_streams__$Stream_ErrorStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_ErrorStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Failed(this.error)));
	}
});
var tink_streams_Single = function(value) {
	tink_streams_StreamBase.call(this);
	this.value = value;
};
tink_streams_Single.__name__ = true;
tink_streams_Single.__super__ = tink_streams_StreamBase;
tink_streams_Single.prototype = $extend(tink_streams_StreamBase.prototype,{
	forEach: function(handle) {
		var _gthis = this;
		var ret = handle(this.value.get()).map(function(step) {
			switch(step._hx_index) {
			case 0:
				return tink_streams_Conclusion.Halted(_gthis);
			case 1:
				return tink_streams_Conclusion.Halted(tink_streams_Empty.inst);
			case 2:
				return tink_streams_Conclusion.Depleted;
			case 3:
				var e = step.e;
				return tink_streams_Conclusion.Clogged(e,_gthis);
			}
		});
		return ret.gather();
	}
});
var tink_streams__$Stream_Handler_$Impl_$ = {};
tink_streams__$Stream_Handler_$Impl_$.__name__ = true;
tink_streams__$Stream_Handler_$Impl_$.ofUnknown = function(f) {
	var this1 = f;
	return this1;
};
var tink_streams__$Stream_Reducer_$Impl_$ = {};
tink_streams__$Stream_Reducer_$Impl_$.__name__ = true;
tink_streams__$Stream_Reducer_$Impl_$.ofSafe = function(f) {
	var this1 = f;
	return this1;
};
var tink_streams_Step = $hxEnums["tink.streams.Step"] = { __ename__ : true, __constructs__ : ["Link","Fail","End"]
	,Link: ($_=function(value,next) { return {_hx_index:0,value:value,next:next,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["value","next"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Step",toString:$estr}
};
var tink_url__$Host_Host_$Impl_$ = {};
tink_url__$Host_Host_$Impl_$.__name__ = true;
tink_url__$Host_Host_$Impl_$._new = function(name,port) {
	var this1;
	if(port == null) {
		this1 = name;
	} else if(port > 65535 || port <= 0) {
		throw new js__$Boot_HaxeError("Invalid port");
	} else {
		this1 = "" + name + ":" + port;
	}
	return this1;
};
tink_url__$Host_Host_$Impl_$.get_name = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			var v = _g[0];
			return v.split(":")[0];
		case 2:
			var _g3 = _g[1];
			var v1 = _g[0];
			return v1 + "]";
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
};
tink_url__$Host_Host_$Impl_$.get_port = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			var v = _g[0];
			var _g1 = v.split(":")[1];
			if(_g1 == null) {
				return null;
			} else {
				var p = _g1;
				return Std.parseInt(p);
			}
			break;
		case 2:
			var _g2 = _g[0];
			var v1 = _g[1];
			var _g3 = v1.split(":")[1];
			if(_g3 == null) {
				return null;
			} else {
				var p1 = _g3;
				return Std.parseInt(p1);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
};
var tink_url__$Path_Path_$Impl_$ = {};
tink_url__$Path_Path_$Impl_$.__name__ = true;
tink_url__$Path_Path_$Impl_$.parts = function(this1) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.split("/");
	while(_g1 < _g2.length) {
		var p = _g2[_g1];
		++_g1;
		if(p != "") {
			var this2 = p;
			_g.push(this2);
		}
	}
	return _g;
};
tink_url__$Path_Path_$Impl_$.ofString = function(s) {
	var this1 = tink_url__$Path_Path_$Impl_$.normalize(s);
	return this1;
};
tink_url__$Path_Path_$Impl_$.normalize = function(s) {
	s = StringTools.trim(StringTools.replace(s,"\\","/"));
	if(s == ".") {
		return "./";
	}
	var isDir = StringTools.endsWith(s,"/..") || StringTools.endsWith(s,"/") || StringTools.endsWith(s,"/.");
	var parts = [];
	var isAbsolute = StringTools.startsWith(s,"/");
	var up = 0;
	var _g = 0;
	var _g1 = s.split("/");
	while(_g < _g1.length) {
		var part = _g1[_g];
		++_g;
		var _g2 = StringTools.trim(part);
		switch(_g2) {
		case "":
			break;
		case ".":
			break;
		case "..":
			if(parts.pop() == null) {
				++up;
			}
			break;
		default:
			var v = _g2;
			parts.push(v);
		}
	}
	if(isAbsolute) {
		parts.unshift("");
	} else {
		var _g21 = 0;
		var _g3 = up;
		while(_g21 < _g3) {
			var i = _g21++;
			parts.unshift("..");
		}
	}
	if(isDir) {
		parts.push("");
	}
	return parts.join("/");
};
var tink_url__$Portion_Portion_$Impl_$ = {};
tink_url__$Portion_Portion_$Impl_$.__name__ = true;
tink_url__$Portion_Portion_$Impl_$.stringly = function(this1) {
	return tink_url__$Portion_Portion_$Impl_$.toString(this1);
};
tink_url__$Portion_Portion_$Impl_$.toString = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		try {
			return decodeURIComponent(this1.split("+").join(" "));
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return "";
		}
	}
};
tink_url__$Portion_Portion_$Impl_$.ofString = function(s) {
	var this1 = s == null ? "" : encodeURIComponent(s);
	return this1;
};
var tink_url__$Query_Query_$Impl_$ = {};
tink_url__$Query_Query_$Impl_$.__name__ = true;
tink_url__$Query_Query_$Impl_$.toMap = function(this1) {
	var _g = new haxe_ds_StringMap();
	var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	while(p.hasNext()) {
		var p1 = p.next();
		var key = p1.name.toString();
		var value = p1.value;
		if(__map_reserved[key] != null) {
			_g.setReserved(key,value);
		} else {
			_g.h[key] = value;
		}
	}
	return _g;
};
var tink_url__$Query_QueryStringParser = function(s,sep,set,pos) {
	this.s = s == null ? "" : s;
	this.sep = sep;
	this.set = set;
	this.pos = pos;
};
tink_url__$Query_QueryStringParser.__name__ = true;
tink_url__$Query_QueryStringParser.trimmedSub = function(s,start,end) {
	if(start >= s.length) {
		var this1 = "";
		return this1;
	}
	while(s.charCodeAt(start) < 33) ++start;
	if(end < s.length - 1) {
		while(s.charCodeAt(end - 1) < 33) --end;
	}
	var this2 = s.substring(start,end);
	return this2;
};
tink_url__$Query_QueryStringParser.prototype = {
	hasNext: function() {
		return this.pos < this.s.length;
	}
	,next: function() {
		var next = this.s.indexOf(this.sep,this.pos);
		if(next == -1) {
			next = this.s.length;
		}
		var split = this.s.indexOf(this.set,this.pos);
		var start = this.pos;
		this.pos = next + this.sep.length;
		if(split == -1 || split > next) {
			return new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,next)),tink_url__$Portion_Portion_$Impl_$.ofString(""));
		} else {
			return new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,split)),tink_url__$Query_QueryStringParser.trimmedSub(this.s,split + this.set.length,next));
		}
	}
};
var tink_web_forms__$FormField_FormField_$Impl_$ = {};
tink_web_forms__$FormField_FormField_$Impl_$.__name__ = true;
tink_web_forms__$FormField_FormField_$Impl_$.getValue = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var v = this1.v;
		return v;
	case 1:
		var _g1 = this1.handle;
		throw new js__$Boot_HaxeError("expected plain value but received file");
	}
};
tink_web_forms__$FormField_FormField_$Impl_$.toString = function(this1) {
	return tink_web_forms__$FormField_FormField_$Impl_$.getValue(this1);
};
var tink_web_routing_Context = function(parent,accepts,request,depth,parts,params) {
	this.parent = parent;
	this.accepts = accepts;
	this.request = request;
	this.depth = depth;
	this.parts = parts;
	this.params = params;
};
tink_web_routing_Context.__name__ = true;
tink_web_routing_Context.ofRequest = function(request) {
	return new tink_web_routing_Context(null,tink_web_routing_Context.parseAcceptHeader(request.header),request,0,tink_url__$Path_Path_$Impl_$.parts(request.header.url.path),tink_url__$Query_Query_$Impl_$.toMap(request.header.url.query));
};
tink_web_routing_Context.parseAcceptHeader = function(h) {
	var _g = h.get("accept");
	if(_g.length == 0) {
		return tink_web_routing_Context.acceptsAll;
	} else {
		var values = _g;
		var _g1 = new haxe_ds_StringMap();
		var _g11 = 0;
		while(_g11 < values.length) {
			var v = values[_g11];
			++_g11;
			var _g12 = 0;
			var _g2 = tink_http__$Header_HeaderValue_$Impl_$.parse(v);
			while(_g12 < _g2.length) {
				var part = _g2[_g12];
				++_g12;
				var key = part.value;
				if(__map_reserved[key] != null) {
					_g1.setReserved(key,true);
				} else {
					_g1.h[key] = true;
				}
			}
		}
		var accepted = _g1;
		if(__map_reserved["*/*"] != null ? accepted.getReserved("*/*") : accepted.h["*/*"]) {
			return tink_web_routing_Context.acceptsAll;
		} else {
			return function(t) {
				if(__map_reserved[t] != null) {
					return accepted.existsReserved(t);
				} else {
					return accepted.h.hasOwnProperty(t);
				}
			};
		}
	}
};
tink_web_routing_Context.acceptsAll = function(s) {
	return true;
};
tink_web_routing_Context.prototype = {
	allRaw: function() {
		var _g = this.request.body;
		var tmp;
		if(_g._hx_index == 0) {
			var s = _g.source;
			tmp = s;
		} else {
			tmp = tink_io__$Source_Source_$Impl_$.ofError(new tink_core_TypedError(501,"not implemented",{ fileName : "tink/web/routing/Context.hx", lineNumber : 47, className : "tink.web.routing.Context", methodName : "get_rawBody"}));
		}
		return tink_io_RealSourceTools.all(tmp);
	}
	,parse: function() {
		var _g = this.request.body;
		switch(_g._hx_index) {
		case 0:
			var src = _g.source;
			var parseForm = function() {
				return tink_core__$Promise_Promise_$Impl_$.next(tink_io_RealSourceTools.all(src),tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(chunk) {
					var _g1 = [];
					var part = new tink_url__$Query_QueryStringParser(chunk.toString(),"&","=",0);
					while(part.hasNext()) {
						var part1 = part.next();
						_g1.push(new tink_core_NamedWith(part1.name,tink_http_BodyPart.Value(tink_url__$Portion_Portion_$Impl_$.stringly(part1.value))));
					}
					return _g1;
				}));
			};
			return parseForm();
		case 1:
			var parts = _g.parts;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(parts)));
		}
	}
	,part: function(index) {
		if(this.depth + index >= this.parts.length) {
			return "";
		} else {
			return tink_url__$Portion_Portion_$Impl_$.stringly(this.parts[this.depth + index]);
		}
	}
};
var tink_web_routing_Router0 = function(target) {
	this.target = target;
};
tink_web_routing_Router0.__name__ = true;
tink_web_routing_Router0.prototype = {
	route: function(ctx) {
		var l = ctx.parts.length - ctx.depth;
		var _g2 = ctx.part(0);
		if(ctx.request.header.method == "POST") {
			if(_g2 == "send-mail") {
				if(l > 0 == true) {
					if(l > 1 == false) {
						return tink_core__$Promise_Promise_$Impl_$.ofSpecific(this.sendMail(ctx));
					} else {
						var this1 = ctx.request.header.url;
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : this1.path + "?" + this1.query),{ fileName : "src/server/Main.hx", lineNumber : 17, className : "tink.web.routing.Router0", methodName : "route"}))));
					}
				} else {
					var this2 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this2.query == null ? this2.path : this2.path + "?" + this2.query),{ fileName : "src/server/Main.hx", lineNumber : 17, className : "tink.web.routing.Router0", methodName : "route"}))));
				}
			} else {
				var this3 = ctx.request.header.url;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this3.query == null ? this3.path : this3.path + "?" + this3.query),{ fileName : "src/server/Main.hx", lineNumber : 17, className : "tink.web.routing.Router0", methodName : "route"}))));
			}
		} else {
			var this4 = ctx.request.header.url;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this4.query == null ? this4.path : this4.path + "?" + this4.query),{ fileName : "src/server/Main.hx", lineNumber : 17, className : "tink.web.routing.Router0", methodName : "route"}))));
		}
	}
	,sendMail: function(ctx) {
		var _gthis = this;
		var _g2;
		var _g = ctx.request.header.contentType();
		if(_g._hx_index == 0) {
			var v = _g.data;
			_g2 = "" + v.type + "/" + v.subtype;
		} else {
			_g2 = "application/json";
		}
		var tmp;
		switch(_g2) {
		case "application/json":
			tmp = tink_core__$Promise_Promise_$Impl_$.next(ctx.allRaw(),function(b) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(new tink_json_Parser0().tryParse(b.toString())));
			});
			break;
		case "application/x-www-form-urlencoded":
			tmp = tink_core__$Promise_Promise_$Impl_$.next(ctx.parse(),function(pairs) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(new tink_querystring_Parser0(null,{ fileName : "src/server/Main.hx", lineNumber : 28, className : "tink.web.routing.Router0", methodName : "sendMail"}).tryParse(tink_querystring__$Pairs_Pairs_$Impl_$.ofIterable(pairs))));
			});
			break;
		default:
			var invalid = _g2;
			tmp = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(406,"Cannot process Content-Type " + invalid,{ fileName : "tink/web/macros/Routing.hx", lineNumber : 675, className : "tink.web.routing.Router0", methodName : "sendMail"}))));
		}
		return tink_core__$Promise_Promise_$Impl_$.next(tmp,function(__body__) {
			var body_mail = __body__._0;
			var body_message = __body__._1;
			var body_name = __body__._2;
			var body_subject = __body__._3;
			var body_mail1 = __body__._0;
			var body_message1 = __body__._1;
			var body_name1 = __body__._2;
			var body_subject1 = __body__._3;
			var body_mail2 = __body__._0;
			var body_message2 = __body__._1;
			var body_name2 = __body__._2;
			var body_subject2 = __body__._3;
			var body_mail3 = __body__._0;
			var body_message3 = __body__._1;
			var body_name3 = __body__._2;
			var body_subject3 = __body__._3;
			var body_mail4 = __body__._0;
			var body_message4 = __body__._1;
			var body_name4 = __body__._2;
			var body_subject4 = __body__._3;
			var body_mail5 = __body__._0;
			var body_message5 = __body__._1;
			var body_name5 = __body__._2;
			var body_subject5 = __body__._3;
			var body_mail6 = __body__._0;
			var body_message6 = __body__._1;
			var body_name6 = __body__._2;
			var body_subject6 = __body__._3;
			var body_mail7 = __body__._0;
			var body_message7 = __body__._1;
			var body_name7 = __body__._2;
			var body_subject7 = __body__._3;
			var body_mail8 = __body__._0;
			var body_message8 = __body__._1;
			var body_name8 = __body__._2;
			var body_subject8 = __body__._3;
			var body_mail9 = __body__._0;
			var body_message9 = __body__._1;
			var body_name9 = __body__._2;
			var body_subject9 = __body__._3;
			var body_mail10 = __body__._0;
			var body_message10 = __body__._1;
			var body_name10 = __body__._2;
			var body_subject10 = __body__._3;
			var body_mail11 = __body__._0;
			var body_message11 = __body__._1;
			var body_name11 = __body__._2;
			var body_subject11 = __body__._3;
			var body_mail12 = __body__._0;
			var body_message12 = __body__._1;
			var body_name12 = __body__._2;
			var body_subject12 = __body__._3;
			var body_mail13 = __body__._0;
			var body_message13 = __body__._1;
			var body_name13 = __body__._2;
			var body_subject13 = __body__._3;
			var body_mail14 = __body__._0;
			var body_message14 = __body__._1;
			var body_name14 = __body__._2;
			var body_subject14 = __body__._3;
			var body = { mail : __body__._0, message : __body__._1, name : __body__._2, subject : __body__._3};
			return tink_core__$Promise_Promise_$Impl_$.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(_gthis.target.sendMail(body)))),function(v1) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.toOutgoingResponse(v1))));
			});
		});
	}
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
tink__$Chunk_EmptyChunk.EMPTY = new haxe_io_Bytes(new ArrayBuffer(0));
tink__$Chunk_Chunk_$Impl_$.EMPTY = new tink__$Chunk_EmptyChunk();
tink_chunk_nodejs_BufferChunk.alloc = "allocUnsafe" in Buffer ? js_node_buffer_Buffer.allocUnsafe : function(size) {
	return new js_node_buffer_Buffer(size);
};
tink_core__$Callback_Callback_$Impl_$.depth = 0;
tink_streams_Empty.inst = new tink_streams_Empty();
tink_io__$Source_Source_$Impl_$.EMPTY = tink_streams_Empty.inst;
server_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
